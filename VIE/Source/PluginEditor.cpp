/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
VIEAudioProcessorEditor::VIEAudioProcessorEditor (VIEAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
    // This is where our plugin's editor size is set.
    setSize (520, 500);
    
    worldx = getAudioProcessorAsSubClass()->getWorldX();
    worldy = getAudioProcessorAsSubClass()->getWorldY();
    
    juceImage = ImageCache::getFromMemory (BinaryData::buttonimg_png, BinaryData::buttonimg_pngSize);
	for ( int i = 0; i < 12; i++)
	{
		for (int j = 0; j < 10; j++) {
			addAndMakeVisible(grid[i][j] = new LifeCell ("cells"));
            grid[i][j]->setInterceptsMouseClicks(false, false);
            grid[i][j]->setClickingTogglesState(false);
			grid[i][j]->setImages (true, true, true,
									juceImage, 0.7f, Colours::transparentBlack.withAlpha(0.4f),
									juceImage, 1.0f, Colours::transparentBlack,
									juceImage, 1.0f, Colours::tomato.withAlpha (1.0f),
									0.5f);
			grid[i][j]->setBounds(410/12 * (i+1), 410/10 * (j+1), 20, 20);
		}
	}
    
    DivKnob.setBounds(450, 102, 50, 50);
	DivKnob.setTextBoxStyle(Slider::NoTextBox, true, 80, 16);
	DivKnob.setColour(Slider::rotarySliderFillColourId, Colours::darkgrey);
	DivKnob.setColour(Slider::rotarySliderOutlineColourId, Colours::tomato);
	DivKnob.setSliderStyle(Slider::RotaryVerticalDrag);
	DivKnob.setRange(0., 1.0, 0.1);
    DivKnob.setValue(getAudioProcessorAsSubClass()->getDiv(), dontSendNotification);
	DivKnob.addListener(this);
	addAndMakeVisible(&DivKnob);
    beatDivision.setColour(Label::textColourId, Colours::darkgrey);
    beatDivision.setFont(9.5f);
    setDivLabel(DivKnob.getValue() * 10.0);
    beatDivision.setBounds(460, 142, 60, 30);
    addAndMakeVisible(&beatDivision);
    
    worldSizeX.setBounds(450, 205, 50, 50);
    worldSizeX.setTextBoxStyle(Slider::NoTextBox, true, 80, 16);
    worldSizeX.setColour(Slider::rotarySliderFillColourId, Colours::darkgrey);
	worldSizeX.setColour(Slider::rotarySliderOutlineColourId, Colours::tomato);
	worldSizeX.setSliderStyle(Slider::RotaryVerticalDrag);
    worldSizeX.setRange(0., 1.0, 0.25);
    worldSizeX.setValue((getAudioProcessorAsSubClass()->getWorldX()-8.)/4., dontSendNotification);
    worldSizeX.addListener(this);
    addAndMakeVisible(&worldSizeX);
    sizeX.setColour(Label::textColourId, Colours::darkgrey);
    sizeX.setFont(9.5f);
    setWorldSizeXLabel(worldSizeX.getValue() * 4 + 8);
    sizeX.setBounds(465, 245, 60, 30);
    addAndMakeVisible(&sizeX);
    
    worldSizeY.setBounds(450, 307, 50, 50);
    worldSizeY.setTextBoxStyle(Slider::NoTextBox, true, 80, 16);
    worldSizeY.setColour(Slider::rotarySliderFillColourId, Colours::darkgrey);
	worldSizeY.setColour(Slider::rotarySliderOutlineColourId, Colours::tomato);
	worldSizeY.setSliderStyle(Slider::RotaryVerticalDrag);
    worldSizeY.setRange(0., 1.0, 0.50);
    worldSizeY.setValue((getAudioProcessorAsSubClass()->getWorldY()-8.)/2., dontSendNotification);
    worldSizeY.addListener(this);
    addAndMakeVisible(&worldSizeY);
    sizeY.setColour(Label::textColourId, Colours::darkgrey);
    sizeY.setFont(9.5f);
    setWorldSizeYLabel(worldSizeY.getValue() * 4 + 8);
    sizeY.setBounds(465, 347, 60, 30);
    addAndMakeVisible(&sizeY);
    
    velocityRange.setBounds(33, 450, 180, 10);
    velocityRange.setSliderStyle(Slider::TwoValueHorizontal);
    velocityRange.setColour(Slider::trackColourId, Colours::tomato);
	velocityRange.setColour(Slider::thumbColourId, Colours::darkgrey);
    velocityRange.setTextBoxStyle(Slider::NoTextBox, true, 80, 10);
    velocityRange.setRange(0., 1., 0);
    velocityRange.setMaxValue(getAudioProcessor()->getParameter(VIEAudioProcessor::maxVel), dontSendNotification);
    velocityRange.setMinValue(getAudioProcessor()->getParameter(VIEAudioProcessor::minVel), dontSendNotification);
    velocityRange.addListener(this);
    addAndMakeVisible(&velocityRange);
    
    resetButton.setImages(true, true, true, juceImage, 1.0f, Colours::darkgrey.withAlpha(0.9f), juceImage, 0.1f, Colours::tomato.withAlpha(0.9f), juceImage, 1.0f, Colours::tomato);
    resetButton.setBounds(460, 420, 30, 30);
    resetButton.addListener(this);
    addAndMakeVisible(&resetButton);
    resetLabel.setColour(Label::textColourId, Colours::silver);
    resetLabel.setFont(9.5f);
    resetLabel.setBounds(460, 430, 30, 10);
    resetLabel.setText("R S T", NotificationType::dontSendNotification);
	resetLabel.setInterceptsMouseClicks(false, false);
    addAndMakeVisible(&resetLabel);
    
    resetGrid();
    
    startTimer(30);

}

VIEAudioProcessorEditor::~VIEAudioProcessorEditor()
{
}

//==============================================================================
void VIEAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::mintcream);
    g.setColour(Colours::darkgrey);
	g.setFont(10.0f);
    g.drawSingleLineText("B T D V", 458, 100, Justification::left);
    g.drawSingleLineText("W D T H", 458, 203, Justification::left);
    g.drawSingleLineText("H G H T", 458, 305, Justification::left);
    g.drawSingleLineText("V L - R N G", 35, 470, Justification::left);
    g.setColour(Colours::tomato);
    g.setFont(16.0f);
    g.drawSingleLineText("V I E _ v B E T A", 490, 470, Justification::right);
    g.setColour(Colours::darkgrey);
	g.setFont(9.0f);
    g.drawSingleLineText("E N C Y S T L A B S x N A T A N H", 490, 482, Justification::right);
	
}

void VIEAudioProcessorEditor::timerCallback(){
		for (int i = 0; i<worldx; i++) {
            for (int j = 0; j<worldy; j++) {
                for (int k = 0; k<2; k++) {
                    int state = getAudioProcessorAsSubClass()->getState(i, j, k);
                    float alpha = getAudioProcessorAsSubClass()->getAlpha(i, j);
                    if (state == 1) {
                        grid[i][j]->setState(Button::buttonDown);
                        grid[i][j]->setAlpha(alpha);

                    } else {
                        grid[i][j]->setState(Button::buttonNormal);
                        grid[i][j]->setAlpha(1.0f);

                    }
                    
                }
            }
        }    
}

void VIEAudioProcessorEditor::sliderValueChanged(Slider* sliderThatHasChanged)
{
	if (sliderThatHasChanged == &DivKnob) {
		getAudioProcessor() -> setParameterNotifyingHost(VIEAudioProcessor::DivParam, DivKnob.getValue());
    } else if (sliderThatHasChanged == &worldSizeX) {
        getAudioProcessor() -> setParameterNotifyingHost(VIEAudioProcessor::worldSizeParamX, worldSizeX.getValue());
        worldx = getAudioProcessorAsSubClass()->getWorldX();
    } else if (sliderThatHasChanged == &worldSizeY) {
        getAudioProcessor() -> setParameterNotifyingHost(VIEAudioProcessor::worldSizeParamY, worldSizeY.getValue());
        worldy = getAudioProcessorAsSubClass()->getWorldY();
    } else if (sliderThatHasChanged == &velocityRange) {
        getAudioProcessorAsSubClass() -> setParameterNotifyingHost(VIEAudioProcessor::minVel, velocityRange.getMinValue());
        getAudioProcessorAsSubClass() -> setParameterNotifyingHost(VIEAudioProcessor::maxVel, velocityRange.getMaxValue());
    }
}

void VIEAudioProcessorEditor::buttonClicked (Button *buttonThatWasClicked)
{
    if (buttonThatWasClicked == &resetButton)
    {
        std::cout <<" P A N I C !" << std::endl;
        //clear all drawing
        //empty all arrays
        getAudioProcessorAsSubClass()->resetWorld();
    }
}

void VIEAudioProcessorEditor::handleAsyncUpdate()
{
	DivKnob.setValue(getAudioProcessor()->getParameter(VIEAudioProcessor::DivParam), dontSendNotification);
    int selectDiv = DivKnob.getValue() * 10.0;
    setDivLabel(selectDiv);
    
    worldSizeX.setValue(getAudioProcessor()->getParameter(VIEAudioProcessor::worldSizeParamX), dontSendNotification);
    selectX = worldSizeX.getValue() * 4 + 8;
    worldx = getAudioProcessorAsSubClass()->getWorldX();
    setWorldSizeXLabel(selectX);
    
    worldSizeY.setValue(getAudioProcessor()->getParameter(VIEAudioProcessor::worldSizeParamY), dontSendNotification);
    selectY = worldSizeY.getValue() * 2 + 8;
    worldy = getAudioProcessorAsSubClass()->getWorldY();
    setWorldSizeYLabel(selectY);
    
    resetGrid();
    
    velocityRange.setMaxValue(getAudioProcessor()->getParameter(VIEAudioProcessor::maxVel), dontSendNotification);
    velocityRange.setMinValue(getAudioProcessor()->getParameter(VIEAudioProcessor::minVel), dontSendNotification);
}

void VIEAudioProcessorEditor::resetGrid(){
    for ( int i = 0; i < 12; i++)
	{
		for (int j = 0; j < 10; j++) {
			if ((i >= worldx) || (j >= worldy)) {
                //grid[i][j]->setVisible(false);
                fadeOutComponent.animateComponent(grid[i][j], grid[i][j]->getBounds(), 0.2, 1000, true, 1.0, 1.0);
                //fadeOutComponent.fadeOut(grid[i][j], 300);
                //grid[i][j]->setAlpha(0.2f);
            } else {
                fadeOutComponent.animateComponent(grid[i][j], grid[i][j]->getBounds(), 1.0, 1000, true, 1.0, 1.0);
                //fadeOutComponent.fadeIn(grid[i][j], 300);
                //grid[i][j]->setVisible(true);
            }
		}
	}
    repaint();
}

void VIEAudioProcessorEditor::setDivLabel(int div){
    switch (div) {
        case 0:
            beatDivision.setText("1", NotificationType::dontSendNotification);
            break;
        case 1:
            beatDivision.setText("1/2", NotificationType::dontSendNotification);
            break;
        case 2:
            beatDivision.setText("1/2T", NotificationType::dontSendNotification);
            break;
        case 3:
            beatDivision.setText("1/4", NotificationType::dontSendNotification);
            break;
        case 4:
            beatDivision.setText("1/4T", NotificationType::dontSendNotification);
            break;
        case 5:
            beatDivision.setText("1/8", NotificationType::dontSendNotification);
            break;
        case 6:
            beatDivision.setText("1/8T", NotificationType::dontSendNotification);
            break;
        case 7:
            beatDivision.setText("1/16", NotificationType::dontSendNotification);
            break;
        case 8:
            beatDivision.setText("1/16T", NotificationType::dontSendNotification);
            break;
        case 9:
            beatDivision.setText("1/32", NotificationType::dontSendNotification);
            break;
        case 10:
            beatDivision.setText("1/32T", NotificationType::dontSendNotification);
            break;
        default:
            break;
            //or dontSendNotification
    }
}
void VIEAudioProcessorEditor::setWorldSizeXLabel (int selX){
    switch (selX) {
        case 8:
            sizeX.setText("8", NotificationType::dontSendNotification);
            break;
        case 9:
            sizeX.setText("9", NotificationType::dontSendNotification);
            break;
        case 10:
            sizeX.setText("10", NotificationType::dontSendNotification);
            break;
        case 11:
            sizeX.setText("11", NotificationType::dontSendNotification);
            break;
		case 12:
            sizeX.setText("12", NotificationType::dontSendNotification);
            break;
        default:
            break;
            //or dontSendNotification
    }
}

void  VIEAudioProcessorEditor::setWorldSizeYLabel (int selY){
    switch (selY) {
        case 8:
            sizeY.setText("8", NotificationType::dontSendNotification);
            break;
        case 9:
            sizeY.setText("9", NotificationType::dontSendNotification);
            break;
        case 10:
            sizeY.setText("10", NotificationType::dontSendNotification);
            break;
        default:
            break;
            //or dontSendNotification
    }
}